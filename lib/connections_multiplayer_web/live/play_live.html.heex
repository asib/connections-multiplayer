<ul id="online_users" phx-update="stream" class="flex space-x-2">
    <li :for={{dom_id, %{id: id, metas: [meta | _]}} <- @streams.presences} id={dom_id} class="scale-0 w-[4rem]"
        aria-label={"Anonymous #{avatar_name(id)}"} phx-hook="Avatar" phx-mounted={JS.dispatch("animate-in")}
        data-avatar-id={id}>
        <div class={["w-full rounded-full", meta.colour]}>
            <img src={"/images/avatars/#{avatar_name(id)}.png"} alt={"Anonymous #{avatar_name(id)}"}
                class="p-4 w-full" />
        </div>
        <.tooltip class="px-4 py-2 font-medium text-black bg-card border-2 border-card-selected rounded-md">
            Anonymous {avatar_name(id)} {if(id == @avatar, do: "(You)")}
        </.tooltip>

    </li>
</ul>

<.async_result :let={puzzle_date} assign={@puzzle_date}>
    <.async_result :let={puzzle_date_form} assign={@puzzle_date_form}>
        <.form for={puzzle_date_form} class="font-light font-serif py-4" phx-change="change_puzzle_date">
            <.input type="date" field={puzzle_date_form[:date]} value={puzzle_date} />
        </.form>
    </.async_result>
</.async_result>
<!-- <p class="font-light font-serif pb-4">{human_month(@puzzle_date)} {@puzzle_date.day}, {@puzzle_date.year}</p> -->
<div
    class="mx-auto grid grid-cols-[repeat(4,1fr)] grid-rows-[repeat(4,1fr)] w-[calc(3*8px+4*22.5vw)] h-[calc(3*8px+4*22.5vw)] sm:w-[calc(3*8px+4*150px)] sm:h-[calc(3*8px+4*80px)] gap-x-2 sm:gap-x-3 gap-y-2">
    <.async_result :let={category_difficulties} assign={@category_difficulties}>
        <.async_result :let={found_categories} assign={@found_categories}>
            <div :for={{category, cards} <- Enum.reverse(found_categories)} class={["text-center col-span-4 py-4
                rounded-md", category_colour(category_difficulties[category]) ]}>
                <h3 class="text-lg font-bold">{category}</h3>
                <p>{Enum.join(cards, ", ")}</p>
            </div>
        </.async_result>
    </.async_result>
    <.async_result :let={cards} assign={@cards}>
        <:loading>
            <button :for={_ <- 1..16}
                class="text-center py-6 rounded-md font-bold text-lg bg-card flex justify-center items-center">
                &nbsp;
            </button>
        </:loading>
        <:failed>Failed to fetch cards, retry...</:failed>
        <button :for={{card, selected} <- cards_in_order(cards)} id={card} phx-click="toggle_card" phx-value-card={card}
            class={[ "rounded-md font-bold overflow-hidden flex flex-wrap content-center justify-center p-2" ,
            if(selected, do: "bg-card-selected" , else: "bg-card" ), selected && "text-white" ]} phx-hook="CardButton">
            {card}
        </button>
    </.async_result>
</div>
<div class="w-full pt-4 flex justify-center space-x-2">
    <button class={[ "border border-gray-800 rounded-full py-4 px-6 text-center" , !submittable(@cards)
        && "!border-gray-300 text-gray-300" ]} disabled={!submittable(@cards)} phx-click="submit">
        Submit
    </button>
    <button class="border border-gray-800 rounded-full py-4 px-6 text-center" phx-click="deselect_all">
        Deselect All
    </button>
</div>